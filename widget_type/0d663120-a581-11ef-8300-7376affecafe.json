{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "trendz_bundle.trendz_view_latest",
    "name" : "Trendz View Latest",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/trendz_view_latest_widget_image.png",
    "description" : "Displays saved Trendz visualizations which should use a dashboard alias to filter data in the view.",
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://thingsboard.cloud/trendz/bundle/trendz-tb-lib.js",
        "isModule" : true
      } ],
      "templateHtml" : "<div *ngIf=\"!inited\" class=\"center-scree\">Native Trendz View with filter alias</div>\n<div *ngIf=\"jwt\" (click)=\"onClick($event)\">\n  <tb-example\n    [jwt]=\"getJwtToken()\"\n    [jwtRefresh]=\"getRefreshToken()\"\n    [ctx]=\"ctx\"\n    [isInEditMode]=\"ctx.isEdit\"\n    [isViewMode]=\"true\"\n    [filterValues]=\"filterValue\"\n    (dataChannel)=\"onDataChannleInit($event)\"\n  ></tb-example>\n</div>\n",
      "templateCss" : ".center-scree {\n    width: 100%; \n    height: 100%;\n    border: 0; \n    text-align: center;\n    font-size: 40px;\n}",
      "controllerScript" : "let $scope;\nlet settings;\nlet prevFilterValue;\nlet utils;\n\n\nself.actionSources = function() {\n    return {\n        'rowClick': {\n            name: 'widget-action.row-click',\n            multiple: false\n        },\n        'dateSelected': {\n            name: 'date-selected',\n            multiple: false\n        },\n        'changedRadioButton': {\n            name: 'changed-radio-button',\n            multiple: false\n        },\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onInit = function() {\n    $scope = self.ctx.$scope;\n    $scope.ctx = self.ctx;\n    $scope.jwt = self.getJwtToken();\n    $scope.jwtRefresh = self.getRefreshToken();\n    $scope.inited = false;\n\n    settings = JSON.parse(JSON.stringify($scope.ctx\n        .settings)) || {};\n    utils = self.ctx.$scope.$injector.get(self.ctx\n        .servicesMap.get('utils'));\n\n    $scope.getJwtToken = self.getJwtToken;\n    $scope.ctx.getJwtToken = self.getJwtToken;\n\n    $scope.getRefreshToken = self.getRefreshToken;\n    $scope.ctx.getRefreshToken = self.getRefreshToken;\n\n    $scope.onDataChannleInit = self.onDataChannleInit;\n    $scope.ctx.onDataChannleInit = self\n        .onDataChannleInit;\n\n    self.ctx.jwt = $scope.jwt;\n    if (!settings.viewUrl || settings.viewUrl ===\n        'http://localhost:4200/viewMode/{id}/') {\n        $scope.inited = false;\n    } else {\n        $scope.inited = true;\n    }\n\n    if (settings.widgetTitle && settings.widgetTitle.length) {\n        let titlePattern = utils.customTranslation(settings.widgetTitle, settings.widgetTitle);\n        \n        let newTitle;\n        if(self.ctx.datasources.length !== 1) {\n            newTitle = titlePattern.replace(/\\${.*?}/g, \"\");\n        } else {\n            let datasource = self.ctx.datasources[0];\n            newTitle = utils.createLabelFromDatasource(datasource, titlePattern);\n        }\n\n        if (self.ctx.widgeTitle !== newTitle) {\n            self.ctx.widgetTitle = newTitle;\n            self.ctx.updateWidgetParams();\n        }\n    }\n\n    // new CODE for widget click\n\n    // new CODE for widget ckick\n    self.ctx.$scope.onClick = function(e) {\n        if ((e && e.target && e.target.className\n                .includes('mat-menu-trigger')) ||\n            (e && e.target && e.target.className\n                .includes('mat-button-wrapper'))\n        ) {\n            return;\n        }\n\n        let descriptors = self.ctx.$scope.ctx\n            .actionsApi.getActionDescriptors(\n                'elementClick');\n        let actionEvent;\n        if (descriptors.length) {\n            actionEvent = descriptors[0];\n\n            setTimeout(() => {\n                self.ctx.$scope.ctx\n                    .actionsApi\n                    .handleWidgetAction(\n                        null,\n                        actionEvent);\n            }, 0);\n        }\n\n    }\n}\n\nself.onDataUpdated = function() {\n\n    let newFilters = readFilterValues();\n\n    if (prevFilterValue === newFilters) {\n        return;\n    }\n\n    $scope.filterValue = newFilters;\n    prevFilterValue = $scope.filterValue;\n}\n\nself.onDestroy = function() {\n}\n\nself.onEditModeChanged = function(e) {\n}\n\nself.onResize = function() {\n    if ($scope.subscriptionService) {\n        $scope.subscriptionService.emit('parentResize',\n            'tb_dashboard', 'onResizeEvent');\n    }\n}\n\nself.onDataChannleInit = function(subscriptionService) {\n    $scope.subscriptionService = subscriptionService;\n}\n\nfunction readFilterValues() {\n    if (self.ctx && self.ctx.defaultSubscription && self.ctx\n        .defaultSubscription.data && self.ctx\n        .defaultSubscription.data.length > 0) {\n        let filterValues = [];\n        for (let i = 0; i < self.ctx.defaultSubscription\n            .data.length; i++) {\n            let value = getDescendantProp(self.ctx\n                .defaultSubscription.data[i], 'data.0.1'\n                );\n            if (value && value !== 'Unresolved') {\n                filterValues.push(value);\n            }\n        }\n        let fitlerObject = {};\n        fitlerObject[settings.filterName] = filterValues;\n        return fitlerObject;\n    } else {\n        usePostMessage = false;\n        return null;\n    }\n}\n\nfunction getDescendantProp(obj, path) {\n    return path.split('.').reduce((acc, part) => acc && acc[\n        part], obj)\n}\n\nself.getRefreshToken = function() {\n    let jwtToken = localStorage.getItem(\n    'refresh_token');\n    if (jwtToken) {\n        jwtToken = jwtToken.replaceAll('\"', \"\");\n        return jwtToken;\n    }\n\n    return 'unknwown';\n}\n\nself.getJwtToken = function() {\n    let jwtToken = localStorage.getItem('jwt_token');\n    if (jwtToken) {\n        jwtToken = jwtToken.replaceAll('\"', \"\");\n        return jwtToken;\n    }\n\n    return 'unknwown';\n}\n\nself.useCustomDatasources = function() {\n    return false;\n};\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: false,\n        useCustomDatasources: true\n    };\n};",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"viewUrl\": {\n                \"title\": \"View URL\",\n                \"type\": \"string\",\n                \"default\": \"http://localhost:4200/viewMode/{id}/\"\n            },\n            \"filterName\": {\n                \"title\": \"Filter name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useDashboardTimeWindow\": {\n                \"title\": \"Use Dashboard Time Window\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"widgetTitle\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\"\n            },\n            \"updateInRealTime\": {\n                \"title\": \"Update data in real time\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"updateInRealTimeInterval\": {\n                \"title\": \"Interval for updating data in real time (minutes)\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n             \"canCancelViewLoading\": {\n                \"title\": \"Show button for cancel view loading\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n             \"isFiltersBroadcasting\": {\n                \"title\": \"Broadcast filter change event\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n             \"isFiltersListen\": {\n                \"title\": \"Listen filter change event\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"channelName\": {\n                \"title\": \"Filter change event name\",\n                \"type\": \"string\",\n                \"default\": \"trendz-filter\"\n            },\n            \"isSaveFilters\": {\n                \"title\": \"Save filters selection\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"enableViewCaching\": {\n                \"title\": \"Enable view caching\",\n                \"type\": \"boolean\",\n                \"default\": true\n            }\n       },\n        \"required\": []\n    },\n    \"form\": [\n        \"viewUrl\",\n        \"filterName\",\n        \"useDashboardTimeWindow\",\n        \"enableViewCaching\",\n        \"widgetTitle\",\n        \"updateInRealTime\",\n        \"updateInRealTimeInterval\",\n        \"canCancelViewLoading\",\n        \"isFiltersBroadcasting\",\n        \"isFiltersListen\",\n        \"channelName\",\n       \"isSaveFilters\"\n   ]\n}",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Trendz Native latest\"}"
    },
    "externalId" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "0d663120-a581-11ef-8300-7376affecafe"
    },
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "0d663120-a581-11ef-8300-7376affecafe"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}